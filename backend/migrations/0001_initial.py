# Generated by Django 3.2.7 on 2021-09-27 10:11

import backend.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Bloc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('text', models.TextField(max_length=1000)),
                ('is_banned_cc', models.BooleanField(default=False)),
                ('is_banned_blitz', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name_plural': 'classes',
            },
        ),
        migrations.CreateModel(
            name='Deck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=5000)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Finish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('description', models.CharField(max_length=500)),
                ('notes', models.CharField(max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('tag', models.CharField(max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Releasenote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Stat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Subtype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Supertype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Talent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Printing',
            fields=[
                ('uid', models.CharField(max_length=15, primary_key=True, serialize=False, unique=True)),
                ('image', models.ImageField(upload_to=backend.models.image_directory_path)),
                ('is_first_edition', models.BooleanField(blank=True, null=True)),
                ('flavour_text', models.TextField(blank=True, max_length=250, null=True)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.card')),
                ('finish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.finish')),
                ('rarity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.rarity')),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.set')),
            ],
        ),
        migrations.CreateModel(
            name='DeckCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField()),
                ('in_sideboard', models.PositiveSmallIntegerField()),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.card')),
                ('deck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.deck')),
            ],
        ),
        migrations.CreateModel(
            name='Copy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_owned', models.PositiveSmallIntegerField()),
                ('amount_wanted', models.PositiveSmallIntegerField()),
                ('amount_trading', models.PositiveSmallIntegerField()),
                ('printing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.printing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'copies',
            },
        ),
        migrations.CreateModel(
            name='CardSupertype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.card')),
                ('supertype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.supertype')),
            ],
        ),
        migrations.CreateModel(
            name='CardSubtype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.card')),
                ('subtype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.subtype')),
            ],
        ),
        migrations.CreateModel(
            name='CardStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=5)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.card')),
                ('stat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.stat')),
            ],
        ),
        migrations.CreateModel(
            name='CardReleasenote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.card')),
                ('releasenote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.releasenote')),
            ],
        ),
        migrations.CreateModel(
            name='CardKeyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.card')),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.keyword')),
            ],
        ),
        migrations.AddField(
            model_name='card',
            name='_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.class'),
        ),
        migrations.AddField(
            model_name='card',
            name='_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.type'),
        ),
        migrations.AddField(
            model_name='card',
            name='bloc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.bloc'),
        ),
        migrations.AddField(
            model_name='card',
            name='talent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.talent'),
        ),
        migrations.AddConstraint(
            model_name='cardsupertype',
            constraint=models.UniqueConstraint(fields=('card', 'supertype'), name='A card cannot have the same super-type more than once'),
        ),
        migrations.AddConstraint(
            model_name='cardsubtype',
            constraint=models.UniqueConstraint(fields=('card', 'subtype'), name='A card cannot have the same subtype more than once'),
        ),
        migrations.AddConstraint(
            model_name='cardstat',
            constraint=models.UniqueConstraint(fields=('card', 'stat'), name='A card cannot have the same stat more than once'),
        ),
        migrations.AddConstraint(
            model_name='cardreleasenote',
            constraint=models.UniqueConstraint(fields=('card', 'releasenote'), name='A card cannot have the same release note more than once'),
        ),
        migrations.AddConstraint(
            model_name='cardkeyword',
            constraint=models.UniqueConstraint(fields=('card', 'keyword'), name='A card cannot have the same keyword more than once'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.UniqueConstraint(fields=('name',), name='unique card'),
        ),
    ]
